/* Cliente MQTT
 * 
 * Opciones necesarias:
 * 		-h <host> -p <port> -q qos> -r -n -m <mesg> -t <topic> -i <client_id> -u <user> -p <pass> -k <keepalive> -c <clean_session>
 * 
 * Opciones para conectarse:
 * 		-h <host> -p <port> -i <client_id> -u <user> -p <pass> -k <keepalive> -c <clean_session>
 * 
 * Informacion que viene de la mota:
 * 	  -i <client_id> -k <keepalive> -c <clean_session>
 * 
 * Este cliente se creará cuando una mota inicie una petición de conexión, con lo cual en un principio solo se tiene información acerca de como hay que rellenar el mensaje CONNECT, la información necesaria para rellenar los mensajes de publicación de eventos se extraerá directamente de los mensajes provenientes de las motas.
 * 
 * Cierta información de conexión vendrá especificada en el CONNECT de la mota, y otra está especificada por defecto en este cliente, o bien le llegará especificada en la linea de argumentos (desde el main() del GW).
 * 
 * La opcion para indicar la QoS no se refiere a la calidad del servicio para el mensaje CONNECT, ya que este mensaje no tiene dicho campo. Se refiere a la QoS que se debe indicar en los flags de CONNECT para el flujo de mensaje que vendrá después.
 * 
 * La información referente a la conexión que se va a establecer se almacena en un manejador de broker, para futuros usos de la misma.
 * */

#include "mqtt.h"

#define TRUE 1
#define FALSE 0

const char *host = "localhost";
const char *port = "1883";

void parse_options(broker_handle_t*,int, char**);

int main(int argc, char* argv[]){
  broker_handle_t *broker = malloc(sizeof(broker_handle_t));
  mqtt_init(broker, host, port);
  parse_options(broker,argc, argv);
  
  mqtt_send_connect(broker);
  mqtt_recv_connack(broker);
  
  /*usando qos1 cuando el cliente recibe el puback, descarta el mensaje original, puesto que ya ha sido enviado y publicado, y lo almacena el servidor*/
  /*mqtt_send_publish("a/b", "hola holita!", 1);
  mqtt_recv_puback();*/
  
  /*
  mqtt_send_ping();
  mqtt_recv_ping();
  */
  
  mqtt_send_subscribe(broker,"a/b", 1);
  mqtt_recv_suback(broker);
  
  mqtt_send_unsubscribe(broker, "a/b");
  mqtt_recv_unsuback(broker);
  
  mqtt_send_disconnect(broker);

  close(broker->sockfd);
  free(broker);

  return 0;
}

void parse_options(broker_handle_t *broker, int argc, char** argv){
  int rc;
  while((rc = getopt(argc, argv, "rdh:p:q:i:u:P:k:c?")) != -1){
    switch(rc){
      case 'r':
	broker->will_retain = TRUE;
	break;
      case 'd':
	broker->debug_session = TRUE;
	break;
      case 'h':
	host = optarg;
	break;
      case 'p':
	port = optarg;
	break;
      case 'q':
	broker->will_qos = atoi(optarg);
	break;
      case 'i':
	strcpy(broker->client_id, optarg);
	break;
      case 'u':
	strcpy(broker->username, optarg);
	break;
      case 'P':
	strcpy(broker->password, optarg);
	break;
      case 'k':
	broker->keep_alive = atoi(optarg);
	break;
      case 'c':
	broker->clean_session = FALSE;
	break;
      case '?':
      default:
	//aqui lo suyo seria o mostrar un mensaje con el uso //correcto del mensaje, o mandar a un archivo de log, que ha //ocurrido un error
	fprintf(stderr, "parse_options(): Error during parsing options\n");
	break;
      }
   }
}
